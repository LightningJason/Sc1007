1. int insertSortedLL(LinkedList *ll, int item) a1q1 //1LN,1i,empty,at least one
2. void alternateMergeLinkedList(LinkedList *ll1, LinkedList *ll2) a1q2 //1LN,1i,1while
3. void moveOddItemsToBack(LinkedList *ll)) a1q3 //1LN,2ix,1for
4. void frontBackSplitLinkedList(LinkedList *ll, LinkedList *resultFrontList, LinkedList *resultBackList) a1q4 //1cur, 4xabi, 2for
5. moveEvenItemsToBack(LinkedList *ll) t1q2 //1LN,2ix,1for
6. moveMaxToFront(ListNode **ptrHead) t1q3 //3pre,cur,preMax 1maxItem, c1 empty,c2 one, c3 rest, 1while, c1 first highest, c2rest
7. void removeDuplicatesSortedLL(LinkedList *ll) t1q4 //1cur,4ipxs,sanity,1for
8. int split(ListNode *cur, ListNode **ptrEvenList,ListNode **ptrOddList) l1q3 //3xab,1while
9. int duplicateReverse(ListNode *cur,ListNode **ptrNewHead) l1q4 //1sanity,1while
10. concatenate(1) practice quesstion, have not confirmed answers
11. combineAlternating(1) practice question, have not confirmed answers
E12. insertDbl() practice question can try
E13 int removeNode(ListNode **ptrHead,int index) l1q1 //2pre,cur c1empty,c2remove first,c3others(if cant find then return)
E14 int removeNode2(LinkedList *ll,int index) //2pre,cur, same as above(rmb minus size)
--------------------------------------------------------------------------------------------------
1. int insertSortedLL(LinkedList *ll, int item)
	ListNode *cur;
	int i=0;
	//empty list
	if (ll->size==0){
        insertNode(ll,0,item);
        return 0;
	}
	//at least one in list
	cur=ll->head;
	}

	while(cur!=NULL){
        if(cur->item==item) return -1;
        if (cur->item<item){
            i++;

            cur=cur->next;
        }

        //account for max number entered
        if (i>=ll->size){
            insertNode(ll,ll->size,item);
            return (ll->size)-1;
        }
        if (cur->item>item){
            insertNode(ll,i,item);
            return i;
        }
        }
--------------------------------------------------------------------------------------------------
2. void alternateMergeLinkedList(LinkedList *ll1, LinkedList *ll2)
	ListNode *cur;
    	int i=1;
	cur=ll1->head;
	while (cur!=NULL){
        if(ll2->head==NULL) return;
	if(cur->next==NULL){
            insertNode(ll1,i,ll2->head->item);
            removeNode(ll2,0);
            return;
	    }
        insertNode(ll1,i,ll2->head->item);
        removeNode(ll2,0);
        i+=2;
        cur=cur->next->next;
	}
--------------------------------------------------------------------------------------------------
3. void moveOddItemsToBack(LinkedList *ll)
ListNode *cur;
	int i,x=0;
	cur=ll->head;
	for(i=0;i<ll->size;i++){
        if ((cur->item)%2==1){
            insertNode(ll,ll->size,cur->item);
            cur=cur->next;
            removeNode(ll,x);
        }
        else {cur=cur->next; x++;
        }
	}
	return;

--------------------------------------------------------------------------------------------------
4. void frontBackSplitLinkedList(LinkedList *ll, LinkedList *resultFrontList, LinkedList *resultBackList)
int x=ll->size;
	int a,b,i;
    a=x/2;
	if (x%2==1) a+=1;
	b=x-a;
	ListNode *cur;

	cur=ll->head;
	for (i=0;i<a;i++){
        insertNode(resultFrontList,i,cur->item);
        cur=cur->next;
	}
	for (i=0;i<b;i++){
        insertNode(resultBackList,i,cur->item);
        cur=cur->next;
	}
--------------------------------------------------------------------------------------------------
5. moveEvenItemsToBack(LinkedList *ll)
	ListNode *cur;
	int x=0,i;
	if (ll->size<2) return;
	cur=ll->head;
	for (i=0;i<ll->size;i++){
        int c=cur->item;
        if (c%2==0){
            insertNode(ll,ll->size,cur->item);
            cur=cur->next;
            removeNode(ll,x);
        }
        else {
            x++;
            cur=cur->next;
	}

    }
--------------------------------------------------------------------------------------------------
6. moveMaxToFront(ListNode **ptrHead)
ListNode *pre, *cur;
	ListNode *preMax = NULL;
	int maxItem;
	// Empty list
	if (*ptrHead == NULL) return -1;
	// Only one node in the list
	if ( (*ptrHead)->next == NULL )
		return 0;
	cur = (*ptrHead);
	maxItem = (*ptrHead)->item;
	// preMax gets set to the address of the ListNode with the max value
	// If preMax is still NULL at the end, first node had the max value
	while (cur != NULL){
		if (cur->item > maxItem){
			maxItem = cur->item;
			preMax = pre;
			}
		pre = cur;
		cur = cur->next;
	}
	// Never saw a value higher than the first node, nothing to move
	if (preMax == NULL)
		return 0;
	// Move node with max value to first position
	cur = preMax->next;
	preMax->next = preMax->next->next;
	// Update head pointer
	cur->next = *ptrHead;
	*ptrHead = cur;
	return 0;
--------------------------------------------------------------------------------------------------
7. void removeDuplicatesSortedLL(LinkedList *ll)

	if (ll->size<2) return;

	ListNode *cur;
	int i,p=1,x,s=ll->size;

	x=ll->head->item;
	cur=ll->head->next;

	for(i=0;i<s-1;i++){
        if(cur->item==x){
            cur=cur->next;
            removeNode(ll,p);
        }
        else {
            x=cur->item;
            cur=cur->next;
            p++;
        }
	}
	return;
--------------------------------------------------------------------------------------------------
8. int split(ListNode *cur, ListNode **ptrEvenList,ListNode **ptrOddList)
    int x=1,a=0,b=0;
    while (cur!=NULL){
        if (x==1){
            insertNode(ptrEvenList,a,cur->item);
            x=-x;
            a++;
        }
        else{
            insertNode(ptrOddList,b,cur->item);
            x=-x;
            b++;
        }
        cur=cur->next;
    }
    return 1;
--------------------------------------------------------------------------------------------------
9. duplicateReverse()
if (cur==NULL) return -1;
    // Simply traverse the list and insert each visited node into the new list at index 0 each time
	while (cur != NULL){
		if (insertNode(ptrNewHead, 0, cur->item) == -1)
			return -1;
		cur = cur ->next;
	}
	return 0;
--------------------------------------------------------------------------------------------------
10. concatenate()
	if (head2==NULL) return 0;
	if (*ptrHead1==NULL) *ptrHead1=head2;
	ListNode *cur;
	cur=*ptrHead1;
	while (cur->next!=NULL) cur=cur->next;

	cur->next=head2;
	return 0;
--------------------------------------------------------------------------------------------------
11. combineAlternating()
if (head2==NULL){
       *ptrHead=head1;
       return 0;}

	if (head1==NULL){
        *ptrHead=head2;
        return 0;
	}

	ListNode *h1=head1, *h2=head2;
	int i=0;
	while (h1!=NULL && h2!=NULL){
        if (h1!=NULL){
            insertNode(&(*ptrHead),i,h1->num);
            i++;
            h1=h1->next;
        }
        if (h2!=NULL){
            insertNode(&(*ptrHead),i,h2->num);
            i++;
            h2=h2->next;
        }
	}

    if (h1==NULL && h2==NULL) return 0;
    return -1;
--------------------------------------------------------------------------------------------------
E12. insertDbl()
--------------------------------------------------------------------------------------------------
E13 int removeNode(ListNode **ptrHead,int index)
	//empty list
    ListNode *pre,*cur;
    if ((*ptrHead)==NULL) return -1;
    //remove first node
    if (index==0){
        cur = *ptrHead;
        *ptrHead=cur->next;
        free(cur);
        return 0;
    }
    //remove other than first node
    if((pre=findNode(*ptrHead,index-1))!=NULL){
        if (pre->next==NULL) return -1;
        cur = pre->next;
        pre->next=cur->next;
        free(cur);
        return 0;
    }
    return -1;
--------------------------------------------------------------------------------------------------
E14 int removeNode2(LinkedList *ll,int index)
	ListNode *cur,*pre;
    //empty node
    if (ll->size==0) return 1;

    //if index 0
    if (index==0){
        cur=ll->head;
        ll->head=cur->next;
        free(cur);
        ll->size --;
        return 1;
    }
    //find pre and cur, then remove and free
    if ((pre=findNode2(*ll,index-1))!=NULL){
        if (pre->next==NULL) return -1;
        cur=pre->next;
        pre->next=cur->next;
        free(cur);
        ll->size --;
        return 1;
    }
    return 0;
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
