1. insertSortedLL()
2. alternateMergeLL()
3. moveoddItemsToBackLL()
4. frontBackSplitLL()
5. moveEvenItemsToBackLL(1) t1q2
6. moveMaxToFrontLL(1) t1q3
7. removeDuplicatesSortedLL(1) t1q4
8. split(1) l1q3
9. duplicateReverse() l1q4
10. concatenate()
11. combineAlternating()
--------------------------------------------------------------------------------------------------
1. insertSortedLL()
--------------------------------------------------------------------------------------------------
2. alternateMergeLL()
--------------------------------------------------------------------------------------------------
3. moveoddItemsToBackLL()
--------------------------------------------------------------------------------------------------
4. frontBackSplitLL()
--------------------------------------------------------------------------------------------------
5. moveEvenItemsToBackLL()
ListNode *cur;
	int d,s,i, j;

	s = ll->size;

	if (s < 2)
		return;
	cur = ll->head;
	j = 0;
	for (i = 0; i < s; i++) {
		if (cur->item % 2 == 0) {
			d = cur->item;
			cur = cur->next;
			removeNode(ll, j);
			insertNode(ll, ll->size, d);
		}
		else {
			cur = cur->next;
			j++;
		}
	}
--------------------------------------------------------------------------------------------------
6. moveMaxToFrontLL()
ListNode *pre, *cur;
	ListNode *preMax = NULL;
	int maxItem;
	// Empty list
	if (*ptrHead == NULL) return -1;
	// Only one node in the list
	if ( (*ptrHead)->next == NULL )
		return 0;
	cur = (*ptrHead);
	maxItem = (*ptrHead)->item;
	// preMax gets set to the address of the ListNode with the max value
	// If preMax is still NULL at the end, first node had the max value
	while (cur != NULL){
		if (cur->item > maxItem){
			maxItem = cur->item;
			preMax = pre;
			}
		pre = cur;
		cur = cur->next;
	}
	// Never saw a value higher than the first node, nothing to move
	if (preMax == NULL)
		return 0;
	// Move node with max value to first position
	cur = preMax->next;
	preMax->next = preMax->next->next;
	// Update head pointer
	cur->next = *ptrHead;
	*ptrHead = cur;
	return 0;
--------------------------------------------------------------------------------------------------
7. removeDuplicatesSortedLL()
/* add your code here */
	if (ll->size<=1) return;
	ListNode *cur;
	int i,j=1,x,y=ll->size;
	cur=ll->head->next;
	x=ll->head->item;

	//test for size>1
	for (i=0;i<y-1;i++){
        if (cur->item==x){
            cur=cur->next;
            removeNode(ll,j);
        }
        else{
            x=cur->item;
            j++;
            cur=cur->next;
        }
--------------------------------------------------------------------------------------------------
8. split()
/* Write your program code here. */
    ListNode *temp;
    int x=1,a=0,b=0;
    while (cur!=NULL){
        if (x==1){
            insertNode(ptrEvenList,a,cur->item);
            x=-x;
            a++;
        }
        else{
            insertNode(ptrOddList,b,cur->item);
            x=-x;
            b++;
        }
        cur=cur->next;
    }
    return 0;
--------------------------------------------------------------------------------------------------
9. duplicateReverse()
if (cur==NULL) return -1;
    // Simply traverse the list and insert each visited node into the new list at index 0 each time
	while (cur != NULL){
		if (insertNode(ptrNewHead, 0, cur->item) == -1)
			return -1;
		cur = cur ->next;
	}
	return 0;
--------------------------------------------------------------------------------------------------
10. concatenate()
--------------------------------------------------------------------------------------------------
11. combineAlternating()
