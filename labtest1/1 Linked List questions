1. insertSortedLL()
2. alternateMergeLL()
3. moveoddItemsToBackLL()
4. frontBackSplitLL()
5. moveEvenItemsToBackLL(1)
6. moveMaxToFrontLL(1)
7. removeDuplicatesSortedLL()
8. split()
9. duplicateReverse()
10. concatenate()
11. combineAlternating()
--------------------------------------------------------------------------------------------------
1. insertSortedLL()
--------------------------------------------------------------------------------------------------
2. alternateMergeLL()
--------------------------------------------------------------------------------------------------
3. moveoddItemsToBackLL()
--------------------------------------------------------------------------------------------------
4. frontBackSplitLL()
--------------------------------------------------------------------------------------------------
5. moveEvenItemsToBackLL()
ListNode *cur;
	int d,s,i, j;

	s = ll->size;

	if (s < 2)
		return;
	cur = ll->head;
	j = 0;
	for (i = 0; i < s; i++) {
		if (cur->item % 2 == 0) {
			d = cur->item;
			cur = cur->next;
			removeNode(ll, j);
			insertNode(ll, ll->size, d);
		}
		else {
			cur = cur->next;
			j++;
		}
	}
--------------------------------------------------------------------------------------------------
6. moveMaxToFrontLL()
ListNode *pre, *cur;
	ListNode *preMax = NULL;
	int maxItem;
	// Empty list
	if (*ptrHead == NULL) return -1;
	// Only one node in the list
	if ( (*ptrHead)->next == NULL )
		return 0;
	cur = (*ptrHead);
	maxItem = (*ptrHead)->item;
	// preMax gets set to the address of the ListNode with the max value
	// If preMax is still NULL at the end, first node had the max value
	while (cur != NULL){
		if (cur->item > maxItem){
			maxItem = cur->item;
			preMax = pre;
			}
		pre = cur;
		cur = cur->next;
	}
	// Never saw a value higher than the first node, nothing to move
	if (preMax == NULL)
		return 0;
	// Move node with max value to first position
	cur = preMax->next;
	preMax->next = preMax->next->next;
	// Update head pointer
	cur->next = *ptrHead;
	*ptrHead = cur;
	return 0;
--------------------------------------------------------------------------------------------------
7. removeDuplicatesSortedLL()
--------------------------------------------------------------------------------------------------
8. split()
--------------------------------------------------------------------------------------------------
9. duplicateReverse()
--------------------------------------------------------------------------------------------------
10. concatenate()
--------------------------------------------------------------------------------------------------
11. combineAlternating()
