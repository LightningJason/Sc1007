1. identical()
2. maxHeight()
3. maxDepth()
4. countOneChildNodes()
5. sumOfOddNodes()
6. mirroeTree()
7. printSmallestValues()
8. smallestValue()
9. hasGreatGrandchild()
10. levelOrderTraversal()
11. inOrderTraversal()
12. preOrderIterative()
13. postOrderIterativeS1()
14. postOrderIterativeS2()
15. printBSTInOrder()
16. isBST()
--------------------------------------------------------------------------------------------------
1. identical()
--------------------------------------------------------------------------------------------------
2. maxHeight()
--------------------------------------------------------------------------------------------------
3. maxDepth()
int c=-1,l,r;
    if (node==NULL) return -1;
    l=maxDepth(node->left);
    if (c<l) c=l;
    r=maxDepth(node->right);
    if (c<r) c=r;
    return c+1;
    
    OR
    
    
    if(node == NULL){
        return -1;
    }
    else{
        int ldepth = maxDepth(node->left);
        int rdepth = maxDepth(node->right);

        if(ldepth > rdepth) return ldepth+1;
        else{
            return rdepth+1;
        }
    }
------------------------------------------------------------------------------------
4. countOneChildNodes()
--------------------------------------------------------------------------------------------------
5. sumOfOddNodes()
--------------------------------------------------------------------------------------------------
6. mirroeTree()
--------------------------------------------------------------------------------------------------
7. printSmallestValues()
--------------------------------------------------------------------------------------------------
8. smallestValue()
--------------------------------------------------------------------------------------------------
9. hasGreatGrandchild()
--------------------------------------------------------------------------------------------------
10. levelOrderTraversal()
Queue q;
    q.head=NULL;
    q.tail=NULL;
    BSTNode *temp;
    temp=root;

    if (temp!=NULL){
        enqueue(&q.head,&q.tail,root);

        while (!isEmpty(q.head)){
            temp=dequeue(&q.head,&q.tail);
            printf("%d ",temp->item);
            if (temp->left!=NULL) enqueue(&q.head,&q.tail,temp->left);
            if (temp->right!=NULL) enqueue(&q.head,&q.tail,temp->right);
        }

    }
    ------------------------------------------------------------------------------------------------
11. inOrderTraversal()
--------------------------------------------------------------------------------------------------
12. preOrderIterative()
Stack s;
	 s.top=NULL;
	 BSTNode *temp;
	 temp = root;

	 if(temp!=NULL){
        push(&s,temp);
        while (!isEmpty(&s)){
            temp=pop(&s);
            printf("%d ",temp->item);
            if (temp->right!=NULL) push(&s,temp->right);
            if (temp->left!=NULL) push(&s,temp->left);
        }
	 }
	 return;
--------------------------------------------------------------------------------------------------
13. postOrderIterativeS1()
--------------------------------------------------------------------------------------------------
14. postOrderIterativeS2()
--------------------------------------------------------------------------------------------------
15. printBSTInOrder()
--------------------------------------------------------------------------------------------------
16. isBST()
