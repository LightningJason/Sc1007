1. int identical(BTNode *tree1, BTNode *tree2) a3q1 //2line1 1return
2. maxHeight(1) p1
3. maxDepth()
4. countOneChildNodes(1) p2
5. sumOfOddNodes(1) p3
6. void mirrorTree(BTNode *node) l3q1 //f)left,f)right,swap.
7. void printSmallerValues(BTNode *node, int m) l3q2 //if smaller print,f)left,f)right
8. int smallestValue(BTNode *node) l3q3 //3lrc, ifnull return big, c=item,l=f)left,r=f)right, return c
9. int hasGreatGrandchild(BTNode *node) l3q4 //if null return -1, l=f)left, r=f)right, if >n then print, return highest+1
10. levelOrderTraversal()
11. void inOrderTraversal(BSTNode *root) a3q2 //make stack, push left till null, while notempty, pop+print+recurvsive right
12. preOrderIterative()
13. void postOrderIterativeS1(BSTNode *root) a3q3 //make stack,push right then temp then go left till null,while not empty, ifright then change then recursive right,else print
14. void postOrderIterativeS2(BSTNode *root) a3q4 //make2stack, pushroot to s1, whiles1 notempty(pop1push2,pushleftpushrights1),prints2
15. void printBSTInOrder(BTNode *node) l4q2 //null return, f)left, print, f)right, return
16. int isBST(BTNode *node, int min, int max) l4q3
E17 void insertBSTNode(BTNode **node, int value) l4q1 //if empty mallocBTNode, <left,>right,=printexist.
E18 BTNode *removeBSTNode(BTNode *node, int value) l4q4

--------------------------------------------------------------------------------------------------
1. int identical(BTNode *tree1, BTNode *tree2)

	if (tree1==NULL && tree2==NULL) return 1;
	
   	if ((tree1==NULL)!=(tree2==NULL)) return 0;

  	if (tree1->item!=tree2->item) return 0;
	
  	return identical(tree1->left, tree2->left) && identical(tree1->right, tree2->right);
   
   
   
   /*
   if (!identical(tree1->left,tree2->left)){
        return 0;
   }

    if (!identical(tree1->right,tree2->right)){
        return 0;
    }

   return 1;*/

--------------------------------------------------------------------------------------------------
2. maxHeight()
int x=-1,l,r;
    if (node==NULL) return -1;
    l=maxHeight(node->left);
    r=maxHeight(node->right);
    if(r>l) l=r;
    if(l>x) x=l;
    return x+1;
--------------------------------------------------------------------------------------------------
3. maxDepth()
int c=-1,l,r;
    if (node==NULL) return -1;
    l=maxDepth(node->left);
    if (c<l) c=l;
    r=maxDepth(node->right);
    if (c<r) c=r;
    return c+1;
    
    OR
    
    
    if(node == NULL){
        return -1;
    }
    else{
        int ldepth = maxDepth(node->left);
        int rdepth = maxDepth(node->right);

        if(ldepth > rdepth) return ldepth+1;
        else{
            return rdepth+1;
        }
    }
------------------------------------------------------------------------------------
4. countOneChildNodes()
	int c=0;
    if (node==NULL) return 0;
    if ((node->left!=NULL&&node->right==NULL)||(node->left==NULL&&node->right!=NULL)){
        c=1;
    }
    return (c+countOneChildNodes(node->left)+countOneChildNodes(node->right));
--------------------------------------------------------------------------------------------------
5. sumOfOddNodes()
int c=0;
    if (node==NULL) return 0;
    if (node->item%2==1) c=1;
    return (c+sumOfOddNodes(node->left)+sumOfOddNodes(node->right));
--------------------------------------------------------------------------------------------------
6. void mirrorTree(BTNode *node)
// write your code here(can just replace cur with node and it will work the same)
	BTNode *temp;
	//if nothing
	if (node==NULL) return;
	//left side
	mirrorTree(node->left);
	//right side
	mirrorTree(node->right);
	//swap here
	temp = node->left;
	node->left=node->right;
	node->right = temp;
	return;
--------------------------------------------------------------------------------------------------
7. void printSmallerValues(BTNode *node, int m)
if (node==NULL) return;
    if (node->item<m)     printf(" %d",node->item);
    printSmallerValues(node->left,m);
    printSmallerValues(node->right,m);
    return;
--------------------------------------------------------------------------------------------------
8. int smallestValue(BTNode *node)
int l, r,c;

	if (node==NULL) return 100;
    c=node->item;
	l=smallestValue(node->left);
	if (l<c) c=l;

	r=smallestValue(node->right);
	if (r<c) c=r;
	return c;
--------------------------------------------------------------------------------------------------
9. int hasGreatGrandchild(BTNode *node)
	int l,r,c=0;
    if (node==NULL) return 0;
    l=hasGreatGrandchild(node->left);
    if (c<l) c=l;
    r=hasGreatGrandchild(node->right);
    if (c<r) c=r;
    if (c>=3) {
            printf("%d ",node->item);
    }
    return c+1;
    
    /*model answer
    	int l, r;

	// Calculate the height of each node in the tree
	// Print out (data stored in) node that has height > n

	if (node == NULL)
		return -1;

	l = hasGreatGrandchild(node->left);
	r = hasGreatGrandchild(node->right);

	if (r > l)
		l = r;
	if (l > 1)
		printf("%d ", node->item);

	return (l + 1);*/
--------------------------------------------------------------------------------------------------
10. levelOrderTraversal()
Queue q;
    q.head=NULL;
    q.tail=NULL;
    BSTNode *temp;
    temp=root;

    if (temp!=NULL){
        enqueue(&q.head,&q.tail,root);

        while (!isEmpty(q.head)){
            temp=dequeue(&q.head,&q.tail);
            printf("%d ",temp->item);
            if (temp->left!=NULL) enqueue(&q.head,&q.tail,temp->left);
            if (temp->right!=NULL) enqueue(&q.head,&q.tail,temp->right);
        }

    }
    ------------------------------------------------------------------------------------------------
11. inOrderTraversal()
	Stack s;
	 s.top=NULL;
	 BSTNode *temp;
	 temp=root;

    if (temp==NULL) return;
    push(&s,temp);
    inOrderTraversal(temp->left);
    while (!isEmpty(&s)){
        temp=pop(&s);
        printf("%d ",temp->item);
        if(temp->right!=NULL){
            inOrderTraversal(temp->right);

        }
    }
--------------------------------------------------------------------------------------------------
12. preOrderIterative()
Stack s;
	 s.top=NULL;
	 BSTNode *temp;
	 temp = root;

	 if(temp!=NULL){
        push(&s,temp);
        while (!isEmpty(&s)){
            temp=pop(&s);
            printf("%d ",temp->item);
            if (temp->right!=NULL) push(&s,temp->right);
            if (temp->left!=NULL) push(&s,temp->left);
        }
	 }
	 return;
--------------------------------------------------------------------------------------------------
13. void postOrderIterativeS1(BSTNode *root)
Stack s;
    s.top=NULL;
    BSTNode *temp,*t;
    temp=root;

    while (temp!=NULL){
        if (temp->right!=NULL) push(&s,temp->right);
        push(&s,temp);
        temp=temp->left;
    }
    while(!isEmpty(&s)){

        temp = pop(&s);

        if ((temp->right)!=NULL && peek(&s)==(temp->right)){
        pop(&s);
        push(&s,temp);
        postOrderIterativeS1(temp->right);
        }
        else printf("%d ",temp->item);
	}
    return;
--------------------------------------------------------------------------------------------------
14. void postOrderIterativeS2(BSTNode *root)
Stack s1,s2;
	 s1.top=NULL;
	 s2.top=NULL;
	 BSTNode *temp;

	 push(&s1,root);

	 while(!isEmpty(&s1)){
        temp=pop(&s1);
        push(&s2,temp);
        if (temp->left!=NULL) push(&s1,temp->left);
        if(temp->right!=NULL) push(&s1,temp->right);

 	 }
 	 while (!isEmpty(&s2)) {
            temp=pop(&s2);
            printf("%d ",temp->item);
     }
     return;
--------------------------------------------------------------------------------------------------
15. void printBSTInOrder(BTNode *node)
	if (node==NULL) return;

	printBSTInOrder(node->left);
	printf("%d ",node->item);
	printBSTInOrder(node->right);
	return;


--------------------------------------------------------------------------------------------------
16. int isBST(BTNode *node, int min, int max)
if(node==NULL) return 1;

    if (node->item>=max||node->item<=min) return 0;

	return isBST(node->left,min,node->item)&&isBST(node->right,node->item,max);
--------------------------------------------------------------------------------------------------
E17 void insertBSTNode(BTNode **node, int value)
if (*node==NULL){
        *node=malloc(sizeof(BTNode));
        (*node)->item=value;
        (*node)->left=NULL;
        (*node)->right=NULL;
        return;
	}



	if ((*node)->item>value){
        insertBSTNode(&((*node)->left),value);
	}
	else if ((*node)->item<value){
        insertBSTNode(&((*node)->right),value);
	}
	else //(*node)->item==value, value already exists hence will not be inserted
    {
        printf("Already exists in the BST\n");
        return;
    }
	return;
--------------------------------------------------------------------------------------------------
BTNode *removeBSTNode(BTNode *node, int value)
	BTNode *p;

	if (node==NULL)
	{
		printf("can't find the value!\n");
		return NULL;
	}

	if (node->item >value) //go left tree
		 node->left = removeBSTNode(node->left, value);

	else if (node->item <value) //go right tree
		 node->right = removeBSTNode(node->right, value);

	else// if ((*node)->item ==value) found the node!
		if (node->left!=NULL && node->right !=NULL ) //*node has two children
		{
			p=findMin(node->right);
			node->item =p->item;
			node->right = removeBSTNode(node->right,p->item );
		}
		else //x has no children or one child
		{
			p=node;

			if (node->left !=NULL)
				node=node->left;
			else
				node=node->right;

			free(p);
		}
	return node;
--------------------------------------------------------------------------------------------------
